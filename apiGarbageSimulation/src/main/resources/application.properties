# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.spatial.dialect.postgis.PostgisDialect
spring.datasource.driverClassName=org.postgresql.Driver
# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
# Connection url for the database
spring.datasource.platform=postgres
#spring.datasource.url = jdbc:postgresql://localhost:5432/iot_garbagecollection
spring.datasource.url = jdbc:postgresql://localhost:5432/iot_garbagecollection
# Username and password
spring.datasource.username = postgres
#Don't replace, the password is (actually) 'mysecretpassword'
spring.datasource.password = root
# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Use spring.jpa.properties.* for Hibernate native properties 
# (the prefix is stripped before adding them to the entity manager).
# Show or not log for each sql query
spring.jpa.show-sql = true
# Hibernate ddl auto (validate, create, create-drop, update): 
# with "update" the database schema will be automatically updated 
# accordingly to java entities found in the project
spring.jpa.hibernate.ddl-auto = update
# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

spring.main.banner-mode=off
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
