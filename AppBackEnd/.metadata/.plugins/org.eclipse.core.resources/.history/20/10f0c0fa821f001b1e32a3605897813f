package com.example.apiGarbageSimulation.services.impl;

import java.io.IOException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.stereotype.Service;

import com.apigarbagecollection.routing.Job;
import com.apigarbagecollection.routing.RoutingReq;
import com.apigarbagecollection.routing.Vehicle;
import com.example.apiGarbageSimulation.Kmeans.Cluster;
import com.example.apiGarbageSimulation.Kmeans.KMeansResultado;
import com.example.apiGarbageSimulation.Kmeans.Punto;
import com.example.apiGarbageSimulation.constants.ResponseApiTest;
import com.example.apiGarbageSimulation.constants.SimulationConstants;
import com.example.apiGarbageSimulation.entities.Routes;
import com.example.apiGarbageSimulation.entities.RoutingResponse;
import com.example.apiGarbageSimulation.entities.Step;
import com.example.apiGarbageSimulation.repositories.RoutesRepository;
import com.example.apiGarbageSimulation.services.IDailyOperationService;
import com.example.apiGarbageSimulation.services.IRoutingService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
@Configurable
public class RoutingService implements IRoutingService {
	
	@Autowired
	IDailyOperationService operationService;
	@Autowired
	RoutesRepository routesRepo;
	
	private final SimpleDateFormat DATE_TIME_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	public RoutingReq generateContainersVehicles(Date date) {
		KMeansResultado KMresult = operationService.clusterize(date); 
		List<Job> jobs = new ArrayList<Job>();
		int contTareas = 0;
		List<Vehicle> vehicles = new ArrayList<Vehicle>();
		int contVehiculos = 0;
		for(Cluster cluster : KMresult.getClusters()) {
			for (Punto punto: cluster.getPuntos()) {
				contTareas++;
				Job tarea = new Job();
				tarea.setId(contTareas);
				tarea.setService(300);
				Integer[] amount = new Integer[1];
				amount[0] = punto.getVolume();
				tarea.setAmount(amount);
				Float[] location = new Float[2];
				location[0] = punto.getY();
				location[1] = punto.getX();
				tarea.setLocation(location);

				jobs.add(tarea);
			}
			contVehiculos ++;
			Vehicle camion = new Vehicle();
			camion.setId(contVehiculos);
			camion.setProfile("driving-car");
			Integer [] capacity = new Integer [1];
			capacity[0] = SimulationConstants.TRUCK_CAPACITY;
			camion.setCapacity(capacity);
			
			Float [] start = new Float [2];
			start[0] = cluster.getCentroide().getY();
			start[1] = cluster.getCentroide().getX();
			camion.setStart(start);
			
			Float [] end = new Float [2];
			camion.setEnd(end);
			
			
			vehicles.add(camion);
		}
		
		RoutingReq routing = new RoutingReq();
		routing.setJobs(jobs);
		routing.setVehicles(vehicles);
		return routing;
	}
	
	public void mapJsonRoutes (Date date) {
		ObjectMapper mapper = new ObjectMapper();
		try {
			RoutingResponse responseWrapper = mapper.readValue(ResponseApiTest.RESPONSE, RoutingResponse.class);
			String prettyStaff1 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(responseWrapper);

            System.out.println(prettyStaff1);
            String fecha =  DATE_TIME_FORMAT.format(new Date());
            
            for (Routes route: responseWrapper.getRoutes()) {
            	try {
					route.setCreated_on(new Timestamp(DATE_TIME_FORMAT.parse(fecha).getTime()));
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            	route.getSteps().add((Step) route.getSteps());
            	routesRepo.save(route);
            }
            
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
